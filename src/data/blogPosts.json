[
  {
    "id": 1,
    "title": "Blog Automation Workflow for Gen-Z Creators",
    "summary": "Learn how to automate your blog content creation and distribution using AI and n8n workflows.",
    "date": "March 29, 2025",
    "imageUrl": "https://eetbqplrrpfakagerrag.supabase.co/storage/v1/object/public/blog-images//image.jpeg",
    "slug": "custom-ai-workflows",
    "tags": ["Automation", "AI", "Workflow"],
    "content": "<h1><strong>Blog Automation Workflow for Gen-Z Creators</strong></h1>\n<h2><strong>Why This Workflow?</strong></h2>\n<ul>\n<li><strong>Time-Saving</strong>: Automate repetitive tasks like content generation and distribution.</li>\n<li><strong>Multi-Platform Ready</strong>: Share content on Slack, Notion, email, and social media.</li>\n<li><strong>AI-Powered</strong>: Use OpenAI to brainstorm and write blogs in minutes.</li>\n<li><strong>Perfect for Beginners</strong>: No coding skills needed—just set up and go!</li>\n</ul>\n<hr>\n<h2><strong>Step-by-Step Process</strong></h2>\n<h3><strong>1. Start with Google Sheets</strong></h3>\n<p><strong>What it does</strong>: Triggers the workflow when you add a new blog idea to your Google Sheets.<br><strong>How does it work:</strong></p>\n<p>Here I have given the input as this:</p>\n<table>\n<thead>\n<tr>\n<th>Id</th>\n<th>Title</th>\n<th>Subtitle</th>\n<th>Subject</th>\n<th>Keywords</th>\n<th>Tags</th>\n<th>Tone</th>\n<th>Image</th>\n<th>Target_Audience</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td>Sample Title</td>\n<td>Sample Subtitle</td>\n<td>Tech</td>\n<td>AI, Automation</td>\n<td>Tech, Blog</td>\n<td>Informative</td>\n<td>Image1.jpg</td>\n<td>Gen-Z Creators</td>\n</tr>\n</tbody></table>\n<p>Taking this as input, our custom AI agent can trigger with the message we write in the next section. To connect Google Sheets, follow the <a href=\"https://docs.n8n.io/external-secrets/#use-secrets-in-n8n-credentials\">n8n Google Sheets setup guide</a>.</p>\n<h3><strong>2. Generate Content with OpenAI</strong></h3>\n<p><strong>What it does</strong>: Uses AI to write a full blog post from your topic and keywords.<br><strong>How does this work:</strong></p>\n<p>In this step, we must follow OpenAI's guidelines to create API keys for connecting our n8n workflow with ChatGPT.</p>\n<p>Refer to these resources for guidance:</p>\n<ul>\n<li><a href=\"https://platform.openai.com/docs/api-reference/introduction\">OpenAI API setup</a></li>\n<li><a href=\"https://docs.n8n.io/integrations/builtin/credentials/openai/\">n8n OpenAI integration</a></li>\n</ul>\n<p>In order to get the best output, refer to this sample image that illustrates how the content is structured:</p>\n<p><img src=\"https://eetbqplrrpfakagerrag.supabase.co/storage/v1/object/public/blog-images//image.jpeg\" alt=\"Prompt Example\"></p>\n<h3><strong>3. Edit Your Content</strong></h3>\n<p><strong>What it does</strong>: Lets you tweak the AI's draft to match your voice.<br><strong>Example</strong>: Change formal phrases like <em>&quot;One may consider&quot;</em> to <em>&quot;You should totally try...&quot;</em><br><strong>Why are we using this</strong>: Because ChatGPT may hallucinate or provide inaccurate information, so this editing step ensures high-quality content.</p>\n<h3><strong>4. Split Content for Sharing</strong></h3>\n<p><strong>What it does</strong>: Breaks your blog into bite-sized pieces for social media, emails, etc.<br><strong>How and Why are we doing this:</strong> Content is divided for both <strong>Slack</strong> and <strong>Notion</strong> to streamline distribution.</p>\n<h3><strong>5. Notify Your Team on Slack</strong></h3>\n<p><strong>What it does</strong>: Sends a Slack message when the blog is ready.<br><strong>How can we achieve this:</strong> Follow the <a href=\"https://docs.n8n.io/integrations/builtin/credentials/slack/\">Slack setup guide</a> for steps to create a channel, app, OAuth ID, and scopes to connect Slack with n8n.</p>\n<p><img src=\"https://eetbqplrrpfakagerrag.supabase.co/storage/v1/object/public/blog-images//Slack.jpeg\" alt=\"Slack Example\"></p>\n<h3><strong>6. Organize in Notion</strong></h3>\n<p><strong>What it does</strong>: Saves your blog details (title, tags, publish date) in a Notion database.<br><strong>How does this work:</strong> Follow this <a href=\"https://docs.n8n.io/integrations/builtin/credentials/notion/\">Notion setup guide</a> to connect your Notion workspace with n8n.</p>\n<h3><strong>7. Add Custom Magic with Code</strong></h3>\n<p><strong>What it does</strong>: Runs scripts for advanced tasks.<br><strong>How does this help:</strong> Upon success, this step triggers a status code <code>200</code> to confirm completion and sends an email to subscribers. It also uses an OpenAI agent to notify that new content is available with a link for readers. Follow Steps 1 and 2 to set this up.</p>\n<h3><strong>8. Email Your Subscribers</strong></h3>\n<p><strong>What it does</strong>: Sends personalized emails to your audience.<br><strong>How does this work:</strong> Like Google Sheets integration, add a Gmail node in n8n and configure your account for email automation.</p>\n<p>Now our workflow is ready to send content models.</p>\n<h2><strong>Full Workflow in Action</strong> 🎮</h2>\n<ol>\n<li>Add a blog idea to <strong>Google Sheets</strong> → triggers the workflow.</li>\n<li><strong>OpenAI</strong> writes the draft → you edit it.</li>\n<li><strong>Split</strong> the content into social posts, emails, etc.</li>\n<li>Get team feedback via <strong>Slack</strong>.</li>\n<li>Log the blog in <strong>Notion</strong>.</li>\n<li>Use <strong>Code</strong> for extra automation.</li>\n<li>Send the final piece to subscribers via <strong>Gmail</strong>.</li>\n</ol>\n<h2><strong>Why You'll Love It</strong></h2>\n<ul>\n<li><strong>Effortless</strong>: Focus on creativity while AI handles the heavy lifting.</li>\n<li><strong>Scalable</strong>: Go from 1 blog/month to 10 blogs/week.</li>\n<li><strong>Trendy</strong>: Perfect for Gen-Z creators who love tech and side hustles.</li>\n</ul>\n",
    "targetAudience": ["Content Creators", "Gen-Z", "Bloggers"]
  },
  {
    "id": 2,
    "title": "Creating RAG AI-Agent Chat Bot for Your Website: Part 1",
    "summary": "Build a powerful RAG-based AI chatbot for your website using n8n, OpenAI, and Supabase - Part 1: Backend Setup",
    "date": "April 1, 2025",
    "imageUrl": "https://eetbqplrrpfakagerrag.supabase.co/storage/v1/object/public/blog-images/Blog-2/Blog%202%20-part%201/figure%201.jpeg",
    "slug": "rag-ai-agent-chat-bot-part-1",
    "tags": ["AI", "RAG", "Backend", "n8n", "OpenAI"],
    "content": "<h1>Creating RAG AI-Agent Chat Bot for Your Website: Part 1</h1>\n<h2>Why This Project?</h2>\n<ul>\n<li><strong>Intelligent Interaction</strong>: Create a chatbot that truly understands your website content</li>\n<li><strong>Seamless Integration</strong>: Connect directly with your existing website infrastructure</li>\n<li><strong>Scalable Solution</strong>: Handle growing user interactions efficiently</li>\n<li><strong>Cost-Effective</strong>: Optimize API usage and resource consumption</li>\n</ul>\n<p><img src=\"https://eetbqplrrpfakagerrag.supabase.co/storage/v1/object/public/blog-images/Blog-2/Blog%202%20-part%201/figure%201.jpeg\" alt=\"Complete RAG AI-Agent Workflow Overview\"><br><em>Figure 1: Complete RAG AI-Agent Workflow Overview</em></p>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#introduction\">Introduction</a></li>\n<li><a href=\"#prerequisites\">Prerequisites</a></li>\n<li><a href=\"#required-environment-variables\">Required Environment Variables</a></li>\n<li><a href=\"#step-by-step-implementation\">Step-by-Step Implementation</a></li>\n<li><a href=\"#troubleshooting\">Troubleshooting</a></li>\n<li><a href=\"#security-considerations\">Security Considerations</a></li>\n<li><a href=\"#performance-optimization\">Performance Optimization</a></li>\n<li><a href=\"#next-steps\">Next Steps</a></li>\n</ol>\n<h2>Introduction</h2>\n<p>This guide will walk you through creating a RAG (Retrieval-Augmented Generation) AI-Agent Chat Bot for your website. We'll use n8n for workflow automation, OpenAI for AI processing, and Supabase for vector storage. This implementation is split into two parts:</p>\n<ul>\n<li>Part 1 (Current): Backend setup and workflow configuration</li>\n<li>Part 2: Frontend integration and deployment</li>\n</ul>\n<h2>Prerequisites</h2>\n<p>Before we begin, ensure you have:</p>\n<ol>\n<li>Your own website with chatbot features</li>\n<li>N8N cloud version (latest)</li>\n<li>Chat-gpt API access with:<ul>\n<li>GPT-3.5-turbo model access</li>\n<li>text-embedding-ada-002 model access</li>\n</ul>\n</li>\n<li>Supabase account with:<ul>\n<li>Vector storage enabled</li>\n<li>PostgreSQL database</li>\n</ul>\n</li>\n<li>Google Drive access (for document storage)</li>\n<li>Basic understanding of:<ul>\n<li>API integrations</li>\n<li>Vector databases</li>\n<li>Webhook configurations</li>\n</ul>\n</li>\n</ol>\n<h2>Required Environment Variables</h2>\n<p>Set up these environment variables in your n8n instance:</p>\n<pre><code class=\"language-env\">OPENAI_API_KEY=your_openai_api_key\nSUPABASE_URL=your_supabase_url\nSUPABASE_KEY=your_supabase_key\nGOOGLE_DRIVE_CREDENTIALS=your_google_drive_credentials\n</code></pre>\n<h2>Step-by-Step Implementation</h2>\n<h3>Step 1: Initial Workflow Setup</h3>\n<h4>Testing with Chat Node</h4>\n<p>First, we'll build a workflow with Chat Node for testing without webhook integration.</p>\n<p><img src=\"https://eetbqplrrpfakagerrag.supabase.co/storage/v1/object/public/blog-images/Blog-2/Blog%202%20-part%201/figure%202.jpeg\" alt=\"Chat Connected to RAG Agent\"><br><em>Figure 2: Chat Connected to RAG Agent</em></p>\n<h3>Step 2: Data Vectorization Workflow</h3>\n<h4>Creating Vector Storage</h4>\n<p>We'll create a new workflow to convert our data to vectors using Supabase Vector Storage.</p>\n<p><img src=\"https://eetbqplrrpfakagerrag.supabase.co/storage/v1/object/public/blog-images/Blog-2/Blog%202%20-part%201/figure%203.jpeg\" alt=\"Converting Data to Vector and Needed Workflow\"><br><em>Figure 3: Converting Data to Vector and Needed Workflow</em></p>\n<h4>Workflow Configuration Steps</h4>\n<ol>\n<li><p><strong>Trigger Setup</strong></p>\n<ul>\n<li>Node: <code>When clicking 'Test workflow'</code></li>\n<li>Connect to: <code>Google Drive (download file)</code></li>\n</ul>\n</li>\n<li><p><strong>File Download</strong></p>\n<ul>\n<li>Node: <code>Google Drive (download file)</code></li>\n<li>Connect to: <code>Default Data Loader</code></li>\n</ul>\n</li>\n<li><p><strong>Data Loading</strong></p>\n<ul>\n<li>Node: <code>Default Data Loader</code></li>\n<li>Connect to: <code>Recursive Character Text Splitter</code></li>\n</ul>\n</li>\n<li><p><strong>Text Chunking</strong></p>\n<ul>\n<li>Node: <code>Recursive Character Text Splitter</code></li>\n<li>Connect to: <code>Embeddings OpenAI</code></li>\n</ul>\n</li>\n<li><p><strong>Embedding Generation</strong></p>\n<ul>\n<li>Node: <code>Embeddings OpenAI</code></li>\n<li>Configuration:<ul>\n<li>Use OpenAI API key</li>\n<li>Choose text-embedding-ada-002 model</li>\n</ul>\n</li>\n<li>Connect to: <code>Supabase Vector Store</code></li>\n</ul>\n</li>\n<li><p><strong>Vector Storage</strong></p>\n<ul>\n<li>Node: <code>Supabase Vector Store</code></li>\n<li>Configuration:<ul>\n<li>Use Supabase credentials for vector storage</li>\n<li>Store embeddings in dedicated table</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<h3>Step 3: Chat Response Workflow</h3>\n<h4>1. Chat Trigger Setup</h4>\n<ul>\n<li>Node: Chat window</li>\n<li>Purpose: Endpoint for chatbot queries</li>\n<li>Configuration:<ul>\n<li>Method: <code>POST</code></li>\n<li>Response: <code>Return Data</code></li>\n<li>Connect to: <code>AI Agent</code></li>\n</ul>\n</li>\n</ul>\n<h4>2. Context Retrieval</h4>\n<ul>\n<li>Node: <code>Supabase Vector Store (Search)</code></li>\n<li>Purpose: Fetch relevant document chunks</li>\n<li>Configuration:<ul>\n<li>Use Supabase credentials</li>\n<li>Query embeddings based on user input</li>\n</ul>\n</li>\n<li>Connect to: <code>AI Agent</code></li>\n</ul>\n<h4>3. AI Agent Configuration</h4>\n<ul>\n<li>Node: <code>AI Agent</code></li>\n<li>Purpose: Process queries and context</li>\n<li>Configuration:<ul>\n<li>Chat Model: <code>OpenAI GPT</code></li>\n<li>Memory: <code>PostgreSQL Chat Memory</code></li>\n<li>Context Input: <code>Supabase Vector Store (Search) Output</code></li>\n</ul>\n</li>\n<li>Connect to: <code>OpenAI Chat Model</code></li>\n</ul>\n<h4>4. Response Generation</h4>\n<ul>\n<li>Node: <code>OpenAI Chat Model</code></li>\n<li>Purpose: Generate AI responses</li>\n<li>Configuration:<ul>\n<li>Use OpenAI API Key</li>\n<li>Response Format: <code>Text</code></li>\n</ul>\n</li>\n<li>Connect to: <code>Postgres Chat Memory</code> and <code>Webhook (Response)</code></li>\n</ul>\n<h4>5. Chat History Storage</h4>\n<ul>\n<li>Node: <code>Postgres Chat Memory</code></li>\n<li>Purpose: Store conversation history</li>\n<li>Configuration:<ul>\n<li>Use same database as vector storage</li>\n<li>Log messages by user ID</li>\n</ul>\n</li>\n<li>Connect to: <code>AI Agent</code></li>\n</ul>\n<h3>Step 4: Webhook Integration</h3>\n<h4>Replacing Chat Node with Webhook</h4>\n<p><img src=\"https://eetbqplrrpfakagerrag.supabase.co/storage/v1/object/public/blog-images/Blog-2/Blog%202%20-part%201/figure%204.jpeg\" alt=\"Webhook Node Configuration\"><br><em>Figure 4: Webhook Node Configuration</em></p>\n<h4>CORS Configuration</h4>\n<p>Configure origins (CORS) for proper access.</p>\n<h3>Step 5: Testing with Postman</h3>\n<h4>Headers Configuration</h4>\n<p><img src=\"https://eetbqplrrpfakagerrag.supabase.co/storage/v1/object/public/blog-images/Blog-2/Blog%202%20-part%201/figure%205.jpeg\" alt=\"Required Headers in Postman\"><br><em>Figure 5: Required Headers in Postman</em></p>\n<h4>Request Body Setup</h4>\n<p><img src=\"https://eetbqplrrpfakagerrag.supabase.co/storage/v1/object/public/blog-images/Blog-2/Blog%202%20-part%201/figure%206.jpeg\" alt=\"Request Body Configuration\"><br><em>Figure 6: Request Body Configuration</em></p>\n<h4>Testing Process</h4>\n<ol>\n<li>Copy webhook test URL</li>\n<li>Paste in Postman</li>\n<li>Start listening for test events</li>\n<li>Send request</li>\n<li>Verify response</li>\n</ol>\n<h3>Step 6: Field Node Integration</h3>\n<h4>Adding Field Nodes</h4>\n<p><img src=\"https://eetbqplrrpfakagerrag.supabase.co/storage/v1/object/public/blog-images/Blog-2/Blog%202%20-part%201/figure%207.png\" alt=\"AI-Agent Node with Field Nodes\"><br><em>Figure 7: AI-Agent Node with Field Nodes</em></p>\n<h4>System Message Configuration</h4>\n<p>Add system message in AI agent options to define behavior.</p>\n<p><img src=\"https://eetbqplrrpfakagerrag.supabase.co/storage/v1/object/public/blog-images/Blog-2/Blog%202%20-part%201/figure%208.jpeg\" alt=\"AI-agent with system message\"><br><em>Figure 8: AI-agent with system message</em></p>\n<h3>Step 7: Production Testing</h3>\n<h4>Final Testing</h4>\n<p><img src=\"https://eetbqplrrpfakagerrag.supabase.co/storage/v1/object/public/blog-images/Blog-2/Blog%202%20-part%201/figure%209.jpeg\" alt=\"Production URL Testing Results\"><br><em>Figure 9: Production URL Testing Results</em></p>\n<h2>Troubleshooting</h2>\n<h3>Common Issues</h3>\n<ol>\n<li><p><strong>CORS Errors</strong></p>\n<ul>\n<li>Ensure CORS is properly configured in webhook node</li>\n<li>Check allowed origins in n8n settings</li>\n</ul>\n</li>\n<li><p><strong>API Rate Limits</strong></p>\n<ul>\n<li>Monitor OpenAI API usage</li>\n<li>Implement rate limiting if needed</li>\n</ul>\n</li>\n<li><p><strong>Vector Search Issues</strong></p>\n<ul>\n<li>Verify Supabase connection</li>\n<li>Check embedding dimensions match</li>\n</ul>\n</li>\n<li><p><strong>Webhook Failures</strong></p>\n<ul>\n<li>Validate webhook URL</li>\n<li>Check request/response format</li>\n</ul>\n</li>\n</ol>\n<h3>Debugging Tips</h3>\n<ol>\n<li>Use n8n execution logs</li>\n<li>Monitor network requests in browser</li>\n<li>Check Supabase logs</li>\n<li>Verify API responses in Postman</li>\n</ol>\n<h2>Security Considerations</h2>\n<ol>\n<li>Never expose API keys in client-side code</li>\n<li>Implement proper authentication</li>\n<li>Use environment variables for sensitive data</li>\n<li>Regular security audits of webhook endpoints</li>\n<li>Monitor API usage and implement rate limiting</li>\n</ol>\n<h2>Performance Optimization</h2>\n<ol>\n<li>Optimize chunk sizes for better retrieval</li>\n<li>Implement caching where appropriate</li>\n<li>Monitor database query performance</li>\n<li>Use appropriate embedding models</li>\n<li>Implement proper error handling</li>\n</ol>\n<h2>Next Steps</h2>\n<p>To connect this to your website's chat-bot backend, please refer to Part 2 of this guide.</p>\n",
    "targetAudience": ["Developers", "AI Enthusiasts", "Website Owners"]
  },
  {
    "id": 3,
    "title": "Creating RAG AI-Agent Chat Bot for your website Part 2",
    "summary": "Build a powerful RAG-based AI chatbot for your website using n8n, OpenAI, and Supabase - Part 2: Frontend Integration",
    "date": "April 1, 2025",
    "imageUrl": "https://eetbqplrrpfakagerrag.supabase.co/storage/v1/object/public/blog-images/Blog-2/First%20Full.jpeg",
    "slug": "rag-ai-agent-chat-bot-part-2",
    "tags": ["AI", "RAG", "Frontend", "React", "TypeScript"],
    "content": "<h1>Creating RAG AI-Agent Chat Bot for your website Part 2</h1>\n<h2>Why This Implementation?</h2>\n<ul>\n<li><strong>User-Friendly Interface</strong>: Create an intuitive chat experience</li>\n<li><strong>Modern Stack</strong>: Use React and TypeScript for robust frontend development</li>\n<li><strong>Responsive Design</strong>: Ensure great user experience across all devices</li>\n<li><strong>Easy Integration</strong>: Seamlessly connect with your existing website</li>\n</ul>\n<p><img src=\"https://eetbqplrrpfakagerrag.supabase.co/storage/v1/object/public/blog-images/Blog-2/First%20Full.jpeg\" alt=\"Complete Portfolio Website with Chatbot Integration\"><br><em>Figure 1: Complete Portfolio Website with Chatbot Integration</em></p>\n<h2>🎯 What You'll Build</h2>\n<p>A professional portfolio website with an AI-powered chatbot that can answer questions about your work, skills, and experience.</p>\n<h2>🚀 Quick Start</h2>\n<ol>\n<li>Set up your n8n workflow (Part 1)</li>\n<li>Configure your frontend (Part 2)</li>\n<li>Test and deploy</li>\n</ol>\n<h2>📋 Prerequisites</h2>\n<ul>\n<li>Basic knowledge of React and TypeScript</li>\n<li>An n8n workflow (from Part 1)</li>\n<li>Your portfolio website code</li>\n</ul>\n<h2>🛠️ Step-by-Step Implementation</h2>\n<h3>1. Setting Up Your Environment</h3>\n<h4>1.1 Configure Environment Variables</h4>\n<p>Create a <code>.env</code> file in your project root:</p>\n<pre><code class=\"language-env\">VITE_WEBHOOK_URL=your-n8n-production-webhook-url\n</code></pre>\n<p><img src=\"https://eetbqplrrpfakagerrag.supabase.co/storage/v1/object/public/blog-images/Blog-2/Github%20Api.jpeg\" alt=\"GitHub Secrets Configuration for Webhook URL\"><br><em>Figure 2: GitHub Secrets Configuration for Webhook URL</em></p>\n<h4>1.2 Set Up GitHub Secrets</h4>\n<ol>\n<li>Go to your repository settings</li>\n<li>Navigate to Secrets and Variables → Actions</li>\n<li>Add <code>VITE_WEBHOOK_URL</code> with your n8n webhook URL</li>\n</ol>\n<h3>2. Building the Chat API Service</h3>\n<p><img src=\"https://eetbqplrrpfakagerrag.supabase.co/storage/v1/object/public/blog-images/Blog-2/Chatwindow.jpeg\" alt=\"Chat windows in website\"><br><em>Figure 3: Chat windows in website</em></p>\n<h4>2.1 Create the API Service</h4>\n<p>Create <code>src/utils/chatApi.ts</code>:</p>\n<pre><code class=\"language-typescript\">interface MessageType {\n  id: string;\n  content: string;\n  sender: 'user' | 'bot';\n  timestamp: string;\n}\n\ninterface ApiResponse {\n  response?: string;\n  message?: string;\n  status?: string;\n  timestamp?: number;\n}\n\nconst API_BASE_URL = import.meta.env.VITE_WEBHOOK_URL;\n\n// Validate API response\nconst isValidResponse = (data: any): data is ApiResponse => {\n  return 'response' in data || 'message' in data;\n};\n\nexport const sendMessage = async (message: string): Promise<MessageType> => {\n  try {\n    const response = await fetch(API_BASE_URL, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n      },\n      body: JSON.stringify({\n        message,\n        timestamp: Date.now(),\n        source: 'portfolio-chat'\n      }),\n    });\n\n    if (!response.ok) {\n      throw new Error(`API error: ${response.status}`);\n    }\n\n    const data = await response.json();\n    \n    if (!isValidResponse(data)) {\n      throw new Error('Invalid response format');\n    }\n\n    return {\n      id: Date.now().toString(),\n      content: data.response || data.message || \"I couldn't process that message.\",\n      sender: 'bot',\n      timestamp: new Date().toISOString()\n    };\n  } catch (error) {\n    console.error('Failed to send message:', error);\n    return {\n      id: Date.now().toString(),\n      content: \"Sorry, I'm having trouble connecting right now. Please try again later.\",\n      sender: 'bot',\n      timestamp: new Date().toISOString(),\n    };\n  }\n};\n</code></pre>\n<h4>2.2 Create a Chat Component</h4>\n<p>Create <code>src/components/Chat.tsx</code>:</p>\n<pre><code class=\"language-typescript\">import React, { useState, useRef, useEffect } from 'react';\nimport { sendMessage } from '../utils/chatApi';\n\ninterface ChatMessage {\n  id: string;\n  content: string;\n  sender: 'user' | 'bot';\n  timestamp: string;\n}\n\nexport const Chat: React.FC = () => {\n  const [messages, setMessages] = useState<ChatMessage[]>([]);\n  const [input, setInput] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n\n  const scrollToBottom = () => {\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n  };\n\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!input.trim() || isLoading) return;\n\n    const userMessage: ChatMessage = {\n      id: Date.now().toString(),\n      content: input,\n      sender: 'user',\n      timestamp: new Date().toISOString(),\n    };\n\n    setMessages(prev => [...prev, userMessage]);\n    setInput('');\n    setIsLoading(true);\n\n    try {\n      const response = await sendMessage(input);\n      setMessages(prev => [...prev, response]);\n    } catch (error) {\n      console.error('Error sending message:', error);\n    }\n  };\n\n  return (\n    <div className=\"flex flex-col h-[500px] w-full max-w-2xl mx-auto\">\n      <div className=\"flex-1 overflow-y-auto p-4 space-y-4\">\n        {messages.map((message) => (\n          <div\n            key={message.id}\n            className={`flex ${message.sender === 'user' ? 'justify-end' : 'justify-start'}`}\n          >\n            <div\n              className={`max-w-[80%] rounded-lg p-3 ${message.sender === 'user' ? 'bg-blue-500 text-white' : 'bg-gray-200 text-gray-800'}`}\n            >\n              {message.content}\n            </div>\n          </div>\n        ))}\n        {isLoading && (\n          <div className=\"flex justify-start\">\n            <div className=\"bg-gray-200 rounded-lg p-3\">\n              <div className=\"flex space-x-2\">\n                <div className=\"w-2 h-2 bg-gray-500 rounded-full animate-bounce\"></div>\n                <div className=\"w-2 h-2 bg-gray-500 rounded-full animate-bounce delay-100\"></div>\n                <div className=\"w-2 h-2 bg-gray-500 rounded-full animate-bounce delay-200\"></div>\n              </div>\n            </div>\n          </div>\n        )}\n        <div ref={messagesEndRef} />\n      </div>\n      <form onSubmit={handleSubmit} className=\"p-4 border-t\">\n        <div className=\"flex space-x-2\">\n          <input\n            type=\"text\"\n            value={input}\n            onChange={(e) => setInput(e.target.value)}\n            placeholder=\"Type your message...\"\n            className=\"flex-1 p-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\n            disabled={isLoading}\n          />\n          <button\n            type=\"submit\"\n            disabled={isLoading}\n            className=\"px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 disabled:opacity-50\"\n          >\n            Send\n          </button>\n        </div>\n      </form>\n    </div>\n  );\n};\n</code></pre>\n<h4>2.3 Add Chat to Your Portfolio</h4>\n<p>Update <code>src/App.tsx</code>:</p>\n<pre><code class=\"language-typescript\">import { Chat } from './components/Chat';\n\nfunction App() {\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Your existing portfolio content */}\n      <section className=\"py-12 bg-white\">\n        <div className=\"container mx-auto px-4\">\n          <h2 className=\"text-3xl font-bold text-center mb-8\">\n            Chat with Me\n          </h2>\n          <Chat />\n        </div>\n      </section>\n    </div>\n  );\n}\n</code></pre>\n<h3>3. Testing Your Setup</h3>\n<p><img src=\"https://eetbqplrrpfakagerrag.supabase.co/storage/v1/object/public/blog-images/Blog-2/Postman.jpeg\" alt=\"Testing API Endpoint with Postman\"><br><em>Figure 4: Testing API Endpoint with Postman</em></p>\n<h4>3.1 Test the API Connection</h4>\n<pre><code class=\"language-bash\">curl -X POST \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"message\":\"test message\"}' \\\n  your-n8n-production-webhook-url\n</code></pre>\n<p><img src=\"https://eetbqplrrpfakagerrag.supabase.co/storage/v1/object/public/blog-images/Blog-2/Browser%20Testing.jpeg\" alt=\"Browser testing\"><br><em>Figure 5: Browser testing</em></p>\n<h4>3.2 Check Browser Console</h4>\n<ul>\n<li>Open Developer Tools (F12)</li>\n<li>Look for:<ul>\n<li>Successful API requests</li>\n<li>Response data</li>\n<li>Any error messages</li>\n</ul>\n</li>\n</ul>\n<h3>4. Common Issues &amp; Solutions</h3>\n<h4>4.1 CORS Issues</h4>\n<p>If you see CORS errors, ensure your n8n workflow includes these headers:</p>\n<pre><code class=\"language-typescript\">'Access-Control-Allow-Origin': '*'\\n'Access-Control-Allow-Methods': 'POST, GET, OPTIONS'\\n'Access-Control-Allow-Headers': 'Content-Type'\\n</code></pre>\n<h4>4.2 Connection Problems</h4>\n<ul>\n<li>Verify your webhook URL is correct</li>\n<li>Check if n8n workflow is active</li>\n<li>Ensure environment variables are set</li>\n</ul>\n<h3>5. Best Practices</h3>\n<h4>5.1 Error Handling</h4>\n<pre><code class=\"language-typescript\">// Custom error types\\nclass ApiError extends Error {\\n  constructor(\\n    message: string,\\n    public status?: number,\\n    public data?: any\\n  ) {\\n    super(message);\\n    this.name = 'ApiError';\\n  }\\n}\\n\\n// Enhanced error handling\\nconst handleApiError = (error: unknown): string => {\\n  if (error instanceof ApiError) {\\n    switch (error.status) {\\n      case 404:\\n        return \"The requested resource wasn't found.\";\\n      case 403:\\n        return \"You don't have permission to access this resource.\";\\n      case 500:\\n        return \"The server encountered an error. Please try again later.\";\\n      default:\\n        return \"An unexpected error occurred. Please try again.\";\\n    }\\n  }\\n  return \"An unexpected error occurred. Please try again.\";\\n};\\n</code></pre>\n<h4>5.2 Rate Limiting Implementation</h4>\n<pre><code class=\"language-typescript\">// src/utils/rateLimiter.ts\\nclass RateLimiter {\\n  private requests: number[] = [];\\n  private readonly limit: number;\\n  private readonly window: number;\\n\\n  constructor(limit: number = 10, windowMs: number = 60000) {\\n    this.limit = limit;\\n    this.window = windowMs;\\n  }\\n\\n  canMakeRequest(): boolean {\\n    const now = Date.now();\\n    this.requests = this.requests.filter(\\n      time => now - time < this.window\\n    );\\n\\n    if (this.requests.length >= this.limit) {\\n      return false;\\n    }\\n\\n    this.requests.push(now);\\n    return true;\\n  }\\n}\\n\\n// Usage in chatApi.ts\\nconst rateLimiter = new RateLimiter(10, 60000); // 10 requests per minute\\n\\nexport const sendMessage = async (message: string): Promise<MessageType> => {\\n  if (!rateLimiter.canMakeRequest()) {\\n    throw new ApiError('Rate limit exceeded. Please try again later.');\\n  }\\n  // ... rest of the sendMessage implementation\\n};\\n</code></pre>\n<h2>🔍 Troubleshooting Guide</h2>\n<h3>Common Errors</h3>\n<table>\n<thead>\n<tr>\n<th>Error Code</th>\n<th>Meaning</th>\n<th>Solution</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>404</td>\n<td>Wrong API endpoint</td>\n<td>Check your webhook URL</td>\n</tr>\n<tr>\n<td>403</td>\n<td>CORS issue</td>\n<td>Add CORS headers</td>\n</tr>\n<tr>\n<td>500</td>\n<td>Server error</td>\n<td>Check n8n workflow</td>\n</tr>\n</tbody></table>\n<h3>Debugging Steps</h3>\n<ol>\n<li>Check Network tab in DevTools</li>\n<li>Verify environment variables</li>\n<li>Test API independently</li>\n<li>Review n8n workflow logs</li>\n</ol>\n<h2>📚 Additional Resources</h2>\n<ul>\n<li><a href=\"https://docs.n8n.io\">n8n Documentation</a></li>\n<li><a href=\"https://reactjs.org/docs\">React Documentation</a></li>\n<li><a href=\"https://www.typescriptlang.org/docs/\">TypeScript Documentation</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API\">Fetch API Guide</a></li>\n</ul>\n<h2>Need Help?</h2>\n<ul>\n<li>Check the <a href=\"https://community.n8n.io\">n8n Community Forum</a></li>\n<li>Review the troubleshooting guide</li>\n<li>Test your API connection</li>\n</ul>\n",
    "targetAudience": ["Developers", "AI Enthusiasts", "Website Owners"]
  }
]